package Audit;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class Auduit {

	public static void main(String[] args) {
        String connectionUrl =
                "jdbc:sqlserver://DESKTOP-QR075V3;"
                + "database=pubs;"
                + "user=sa;"
                + "password=P@ssw0rd;";

        try (Connection connection = DriverManager.getConnection(connectionUrl);
                Statement statement = connection.createStatement();) {
        
        //	System.out.println("ANOMALIAS DE FOREIGN KEY:");
        //	getFks(connection);
        //	System.out.println("\nANOMALIAS EN TRIGGERS:");
        //	getTriggerAnomalies(connection);
        //	System.out.println("\nANOMALIAS NULLAS:");
        	//getTriggerEmtpyAnomalies(connection);
        	
        		Test(connection);
        	
        	
        
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }
	
	
	
	
	
	
	 public static void getTriggerAnomalies(Connection connection) throws SQLException{
		 String dad = "publishers";
		 String column = "pub_id";
		 String child = "pub_info";
		 getNotInfk(dad,column,child,connection);
		 
		 
		 
	 }
	 
	 public static void getTriggerEmtpyAnomalies(Connection connection) throws SQLException{
		 String dad = "publishers";
		 String column = "pub_id";
		 String child = "pub_info";
		 getNullas(dad,column,connection);
		 
	 }
	
	
	
	 public static void consultarIntegReferencial(Connection connection) throws SQLException{
//	        String query = "select schema_name(tab.schema_id) + '.' + tab.name as [table]," +
//	"col.column_id," +
//	"col.name as column_name," +
//	"fk.object_id as rel," +
//	"schema_name(pk_tab.schema_id) + '.' + pk_tab.name as primary_table," +
//	"pk_col.name as pk_column_name," +
//	"fk_cols.constraint_column_id as no," +
//	"fk.name as fk_constraint_name," +
//	"fk.is_disabled as deshabilitado" +
//	"from sys.tables tab" +
//	"inner join sys.columns col " +
//	"on col.object_id = tab.object_id" +
//	"left outer join sys.foreign_key_columns fk_cols" +
//	"on fk_cols.parent_object_id = tab.object_id" +
//	"and fk_cols.parent_column_id = col.column_id" +
//	"left outer join sys.foreign_keys fk" +
//	"on fk.object_id = fk_cols.constraint_object_id" +
//	"left outer join sys.tables pk_tab" +
//	"on pk_tab.object_id = fk_cols.referenced_object_id" +
//	"left outer join sys.columns pk_col" +
//	"on pk_col.column_id = fk_cols.referenced_column_id" +
//	"and pk_col.object_id = fk_cols.referenced_object_id" +
//	"where fk.object_id is not null" +
//	"order by schema_name(tab.schema_id) + '.' + tab.name," +
//	"col.column_id";
	        //rs = stm.executeQuery("SELECT * FROM [dbo].[sales");
		    String query = "SELECT * FROM [dbo].[titles]";
	        Statement stm = connection.createStatement();
	        ResultSet rs = stm.executeQuery(query);
	        while(rs.next())
	        {
	            System.out.println("Tabla: "+rs.getString("table"));
	            System.out.println("Columna" +rs.getString("column_name"));
	            System.out.println("FK constraint: "+rs.getString("fk_constraint_name"));
	            System.out.println("Tabla padre: "+rs.getString("primary_table"));
	            if(rs.getBoolean("deshabilitado")){
	                System.out.println("Constraint no chequeado: "+rs.getString("res"));
	            }else{
	                System.out.println("OK");
	            }
	            
	        }
	        generarLog(query, connection);
	    }
	    
	    public static void generarLog(String query, Connection conn) throws SQLException{
	        //sp_configure 'show advanced options', 1
	        //CallableStatement cst = conn.prepareCall("{call sp_configure 'show advanced options', 1}");
	        CallableStatement cst = conn.prepareCall("{call sp_configure (?,?)}");
	        cst.setString(1, "show advanced options");
	        cst.setInt(2, 1);
	        cst.execute();
	        
	        CallableStatement cst2 = conn.prepareCall("{call logIntegRefer }");
	        
	        cst2.execute();
	    }
	
	
	public static void getFks(Connection conn) throws SQLException {

		Statement statement = conn.createStatement();
		 String selectFks = "SELECT  obj.name AS FK_NAME,\r\n" + 
	         		"    sch.name AS [schema_name],\r\n" + 
	         		"    tab1.name AS [table],\r\n" + 
	         		"    col1.name AS [column],\r\n" + 
	         		"    tab2.name AS [referenced_table],\r\n" + 
	         		"    col2.name AS [referenced_column]\r\n" + 
	         		"FROM sys.foreign_key_columns fkc\r\n" + 
	         		"INNER JOIN sys.objects obj\r\n" + 
	         		"    ON obj.object_id = fkc.constraint_object_id\r\n" + 
	         		"INNER JOIN sys.tables tab1\r\n" + 
	         		"    ON tab1.object_id = fkc.parent_object_id\r\n" + 
	         		"INNER JOIN sys.schemas sch\r\n" + 
	         		"    ON tab1.schema_id = sch.schema_id\r\n" + 
	         		"INNER JOIN sys.columns col1\r\n" + 
	         		"    ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\r\n" + 
	         		"INNER JOIN sys.tables tab2\r\n" + 
	         		"    ON tab2.object_id = fkc.referenced_object_id\r\n" + 
	         		"INNER JOIN sys.columns col2\r\n" + 
	         		"    ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\r\n" + 
	         		"";
		 ResultSet resultSet = statement.executeQuery(selectFks);
		 String dad;
		 String column;
		 String child;
		 
		 while (resultSet.next()) {
             dad = resultSet.getString("referenced_table");
         	 column = resultSet.getString("column");
         	 child = resultSet.getString("table");
         	getNotInfk(dad,column,child,conn);
         	
         }
		
		
	}
	
	
	
	public static void getNotInfk(String dad, String column, String child, Connection conn) throws SQLException {
		
	Statement statement = conn.createStatement();
	
	String Query = "SELECT  child.*\r\n" + 
			"FROM    "+child+" child\r\n" + 
			"LEFT JOIN\r\n" + 
			dad+" padre\r\n" + 
			"ON      padre."+column+" = child."+column+"\r\n" + 
			"WHERE   padre."+column+" IS NULL";

	ResultSet resultSet = statement.executeQuery(Query);
	ResultSetMetaData rsmd = resultSet.getMetaData();
	int columnCount = rsmd.getColumnCount();
	

	 while (resultSet.next()) {
		 System.out.println("\n\nAnomaila en la relación entre "+child+" y "+dad+" en el registro con Datos:\n");
		 for (int i = 1; i <= columnCount; i++ ) {
			  String name = rsmd.getColumnName(i);
			  System.out.println(name+":     "+resultSet.getString(name));
			  
			}
		 System.out.println("No encontrado en el padre: "+resultSet.getString(column));
       
    }
	}
	
	
	public static void getNullas(String table, String column, Connection conn) throws SQLException{
		
		
		Statement statement = conn.createStatement();
		String query = "select * from "+table+" where "+column+" = Null or "+column+" = ''";
		
		
		ResultSet resultSet = statement.executeQuery(query);
		ResultSetMetaData rsmd = resultSet.getMetaData();
		int columnCount = rsmd.getColumnCount();
		
		
		 while (resultSet.next()) {
			 System.out.println("\n\nAnomaila en los Triggers en la tabla "+table+":\n");
			 for (int i = 1; i <= columnCount; i++ ) {
				  String name = rsmd.getColumnName(i);
				  System.out.println(name+":     "+resultSet.getString(name));
				  
				}
			
			
	       
	    }
		
		
		
	}
	
	public static void Test(Connection conn) throws SQLException 
	{
		Statement statement = conn.createStatement();
		String query = "SELECT \r\n" + 
				" t.name AS TableName,\r\n" + 
				" tr.name AS TriggerName  \r\n" + 
				"FROM sys.triggers tr\r\n" + 
				"INNER JOIN sys.tables t ON t.object_id = tr.parent_id";
		
		ResultSet resultSetHijos = statement.executeQuery(query);
		int size =0;
		if (resultSetHijos != null) 
		{
			resultSetHijos.last(); // moves cursor to the last row
		//  size = resultSetHijos.getRow(); // get row id 
			System.out.println("Size: "+size);
		}
		
		
//	ArrayList<String> arrayHijos = new ArrayList<String>();
//		for(int i = 0; i<size;i++) {
	//		arrayHijos.add(resultSetHijos.getString(i+1));
//	}
		
	//	System.out.println("el array hijo es :"+arrayHijos.toString());
		
		 while (resultSetHijos.next()) {
			System.out.println("Here:"+resultSetHijos.getString(1));
			
			
	       
	    }
	
	}
	
	
	}


